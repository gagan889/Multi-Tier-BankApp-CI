name: Java CI with Maven

on:
  push:
    branches: "master" 
  

jobs:
  Compile:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn compile
      
  Test:
    runs-on: ubuntu-latest
    needs : Compile
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: testing the code
      run: mvn test -Dmaven.test.skip=true

  Package:
    runs-on: ubuntu-latest
    needs: Test

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: packaging the code
      run: mvn package -Dmaven.test.skip=true

    - name: Uploading the artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-jar
        path: target/*.jar

  gitleaks:
    runs-on: ubuntu-latest
    needs : Test
    steps:
    - uses: actions/checkout@v4
    - name: Run Gitleaks
      uses: gitleaks/gitleaks-action@v2
    - name : sacn the file through gitleaks
      run : gitleaks detect --source . -r gitleaks.json -f json
            
  Trivy_Scan:
    runs-on: ubuntu-latest
    needs : Package
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Installation of the Trivy
      run: | 
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update -y 
            sudo apt-get install trivy -y
    -  name: Installation of the Trivy
       run: trivy fs --format table -o Trivy-report.json .

  sonarqube:
    runs-on: ubuntu-latest
    needs: Trivy_Scan
    steps:
    - uses: actions/checkout@v4
      with:
        # Disabling shallow clones is recommended for improving the relevancy of reporting
        fetch-depth: 0
    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v5.1.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        
  docker_build_push:
    runs-on: ubuntu-latest
    needs: Package
    steps:
    - uses: actions/checkout@v4

    - name: Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: app-jar           # artifact name from 'Package' job
        path: ./target          # path to download the artifact

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: kasturba998/app:latest

   
  Run-docker_Image:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    needs: docker_build_push
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Pull Docker image
        run: docker pull "${{ secrets.DOCKERHUB_USERNAME }}/app:latest"

      - name: Run Docker container
        run: docker run -p 8080:8080 -d "${{ secrets.DOCKERHUB_USERNAME }}/app:latest"


    
  notify:
  
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Calculate Success and Failure Rates
        run: |
          total=4
          success=0
          for outcome in "${{ needs.build.outputs.checkout_outcome }}" "${{ needs.build.outputs.tests_outcome }}" "${{ needs.build.outputs.build_outcome }}" "${{ needs.build.outputs.deploy_outcome }}"; do
            if [ "$outcome" = "success" ]; then
              success=$((success + 1))
            fi
          done
          failure=$((total - success))
          echo "SUCCESS_RATE=$((success * 100 / total))" >> $GITHUB_ENV
          echo "FAILURE_RATE=$((failure * 100 / total))" >> $GITHUB_ENV

      - name: Send Email Notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: GitHub Actions Workflow Summary - ${{ needs.build.result }}
          to: gagan.gagan66@gmail.com
          from: GitHub Actions <${{ secrets.EMAIL_USERNAME }}>
          content_type: text/html
          body: |
            <!DOCTYPE html>
            <html>
            <head>
              <style>
                body { font-family: Arial, sans-serif; }
                .status-success { color: green; }
                .status-failure { color: red; }
              </style>
            </head>
            <body>
              <h2>Workflow Summary: ${{ github.workflow }}</h2>
              <p><strong>Repository:</strong> ${{ github.repository }}</p>
              <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
              <p><strong>Commit:</strong> ${{ github.sha }}</p>
              <p><strong>Initiated by:</strong> ${{ github.actor }}</p>
              <h3 class="status-${{ needs.build.result }}">
                Status: 
                ${{ needs.build.result == 'success' && '✅ Success' || '❌ Failure' }}
              </h3>
              <ul>
                <li><strong>Checkout Repository:</strong> ${{ needs.build.outputs.checkout_outcome }}</li>
                <li><strong>Run Tests:</strong> ${{ needs.build.outputs.tests_outcome }}</li>
                <li><strong>Build Application:</strong> ${{ needs.build.outputs.build_outcome }}</li>
                <li><strong>Deploy Application:</strong> ${{ needs.build.outputs.deploy_outcome }}</li>
              </ul>
              <p><strong>Success Rate:</strong> ${{ env.SUCCESS_RATE }}%</p>
              <p><strong>Failure Rate:</strong> ${{ env.FAILURE_RATE }}%</p>
              <p>For detailed logs, visit the <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">workflow run</a>.</p>
            </body>
            </html>
